{"version":3,"file":"static/js/962.f84a5a9a.chunk.js","mappings":"qPAEaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAM,EAE/CC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAU,EAIpDC,EAAe,SAAAL,GAAK,OAAIA,EAAMM,OAAQ,E,IAEbC,EAAAA,EAAAA,IACpC,CAACR,EAAgBM,IACjB,SAACJ,EAAUO,GACT,OAAOP,EAASO,QAAO,SAAAC,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASJ,EAAOG,cAAc,GAE7D,I,mBCVWE,EAAc,WACzB,IAAAC,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BJ,EAAIM,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAA0BJ,EAAAA,EAAAA,UAAS,IAAGK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAChBG,GAAWC,EAAAA,EAAAA,MACXvB,GAAWwB,EAAAA,EAAAA,IAAY1B,GAqBvB2B,EAAe,SAAAC,GACnB,IAAAC,EAAwBD,EAAME,OAAtBnB,EAAIkB,EAAJlB,KAAMoB,EAAKF,EAALE,MAEd,OAAQpB,GACN,IAAK,OACHQ,EAAQY,GACR,MAEF,IAAK,QACHR,EAASQ,GACT,MAEF,QACE,MAAM,IAAIC,MAAM,iDAADC,OAAetB,EAAI,2FAExC,EAEA,OACEuB,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,SArCa,SAAAR,GAOnB,GANAA,EAAMS,iBAEoBnC,EAASoC,MACjC,SAAA5B,GAAO,OAAIA,EAAQC,KAAKC,gBAAkBD,EAAKC,aAAa,IAO5D,OAHA2B,MAAM,GAADN,OAAItB,EAAI,8FACbQ,EAAQ,SACRI,EAAS,IAIXC,GAASgB,EAAAA,EAAAA,IAAW,CAAE7B,KAAAA,EAAMW,MAAAA,KAC5BH,EAAQ,IACRI,EAAS,GACX,EAoB+BkB,SAAA,EAC3BP,EAAAA,EAAAA,MAAA,SAAAO,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,UACHC,EAAAA,EAAAA,KAACC,EAAAA,GAAK,CACJC,KAAK,OACLjC,KAAK,OACLoB,MAAOpB,EACPkC,SAAUlB,EACVmB,UAAQ,QAGZZ,EAAAA,EAAAA,MAAA,SAAAO,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,WACHC,EAAAA,EAAAA,KAACC,EAAAA,GAAK,CACJC,KAAK,MACLjC,KAAK,QACLoB,MAAOT,EACPuB,SAAUlB,EACVmB,UAAQ,QAGZJ,EAAAA,EAAAA,KAACK,EAAAA,GAAM,CAACH,KAAK,SAASI,WAAYrC,GAAQW,GAAOmB,SAAC,kBAKxD,E,6BCzEaQ,EAAgBC,EAAAA,GAAAA,MAAYC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uDAK5BC,EAAcH,EAAAA,GAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,iOCF1BG,EAAS,WACpB,IAAM9C,GAASiB,EAAAA,EAAAA,IAAYpB,GACrBkB,GAAWC,EAAAA,EAAAA,MAMjB,OACES,EAAAA,EAAAA,MAACe,EAAa,CAAAR,SAAA,CAAC,yBAEbC,EAAAA,EAAAA,KAACW,EAAW,CACVT,KAAK,OACLjC,KAAK,SACLoB,MAAOtB,EACPoC,SAXe,SAAAjB,GACnBJ,GAASgC,EAAAA,EAAAA,GAAU5B,EAAME,OAAOC,OAClC,MAaF,ECtBa0B,EAAeP,EAAAA,GAAAA,OAAaC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uECC5BM,EAAkB,SAAHC,GAAoD,IAADC,EAAAD,EAA7CjD,QAAWmD,EAAED,EAAFC,GAAIlD,EAAIiD,EAAJjD,KAAMW,EAAKsC,EAALtC,MAASwC,EAAQH,EAARG,SAC9D,OACEpB,EAAAA,EAAAA,KAAA,MAAAD,UACEP,EAAAA,EAAAA,MAAA,KAAAO,SAAA,CACG9B,EAAK,KAAGW,GACToB,EAAAA,EAAAA,KAACe,EAAY,CAACb,KAAK,SAASmB,QAAS,kBAAMD,EAASD,EAAG,EAACpB,SAAC,eAMjE,E,UCZauB,EAAiBd,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6FCC3Ba,EAAU,WACrB,OACEvB,EAAAA,EAAAA,KAACsB,EAAc,CAAAvB,UACbC,EAAAA,EAAAA,KAACwB,EAAAA,GAAa,CACZC,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,MAAM,OACNC,YAAY,IACZC,kBAAkB,OAClBC,UAAU,4BAIlB,ECNaC,EAAc,WACzB,IAAMxE,GAAWwB,EAAAA,EAAAA,IAAY1B,GACvBS,GAASiB,EAAAA,EAAAA,IAAYpB,GACrBD,GAAYqB,EAAAA,EAAAA,IAAYtB,GACxBoB,GAAWC,EAAAA,EAAAA,OAEjBkD,EAAAA,EAAAA,YAAU,WACRnD,GAASoD,EAAAA,EAAAA,MACX,GAAG,CAACpD,IAEJ,IAAMqD,EAAe,SAAAhB,GACnBrC,GAASsD,EAAAA,EAAAA,IAAcjB,GACzB,EAQMkB,EALG7E,EAASO,QAAO,SAAAC,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASJ,EAAOG,cAAc,IAM7D,OACEsB,EAAAA,EAAAA,MAAA,OAAAO,SAAA,CACGpC,IAAaqC,EAAAA,EAAAA,KAACuB,EAAO,KACpB5D,IACAqC,EAAAA,EAAAA,KAAA,MAAAD,SACGsC,EAAiBC,KAAI,SAAAtE,GAAO,OAC3BgC,EAAAA,EAAAA,KAACgB,EAAe,CAEdhD,QAASA,EACToD,SAAUe,GAFLnE,EAAQmD,GAGb,QAMd,EC9CaoB,G,SAAcC,EAAAA,EAAAA,IAAiB/B,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,seCG/B+B,EAAY,WACvB,OACEjD,EAAAA,EAAAA,MAAA,OAAAO,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,eACJC,EAAAA,EAAAA,KAAC5B,EAAW,KACZ4B,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJC,EAAAA,EAAAA,KAACa,EAAM,KACPb,EAAAA,EAAAA,KAACgC,EAAW,KACZhC,EAAAA,EAAAA,KAACuC,EAAW,MAGlB,C,qICfa9C,EAAOe,EAAAA,GAAAA,KAAWC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gIAQlBT,EAAQO,EAAAA,GAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,2MAapBL,EAASG,EAAAA,GAAAA,OAAakC,IAAAA,GAAAhC,EAAAA,EAAAA,GAAA,6I","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.jsx","utils/Spinnerstyled.js","utils/Spinner.jsx","components/ContactList/ContactList.jsx","styles/GlobalStyle.js","pages/Phonebook.js","styles/sharedStyles.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filters;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { Button, Form, Input } from '../../styles/sharedStyles';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const isExistingContact = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (isExistingContact) {\n      alert(`${name} вже є в контактах.`);\n      setName('');\n      setPhone('');\n      return;\n    }\n\n    dispatch(addContact({ name, phone }));\n    setName('');\n    setPhone('');\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'phone':\n        setPhone(value);\n        break;\n\n      default:\n        throw new Error(`Тип поля - ${name} не обробляється`);\n    }\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <label>\n        <p>Name</p>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          required\n        />\n      </label>\n      <label>\n        <p>Phone</p>\n        <Input\n          type=\"tel\"\n          name=\"phone\"\n          value={phone}\n          onChange={handleChange}\n          required\n        />\n      </label>\n      <Button type=\"submit\" disabled={!(name && phone)}>\n        Add contact\n      </Button>\n    </Form>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterWrapper = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const FilterInput = styled.input`\n  width: 200px;\n  border: 1px solid #ccc;\n  padding: 4px;\n  font-size: 16px;\n  outline: none;\n  margin: 8px 0 28px;\n\n  &:focus {\n    outline: 2px solid rgb(96, 192, 255, 0.7);\n    border-radius: 4px;\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from '../../redux/contacts/selectors';\nimport { setFilter } from '../../redux/contacts/filtersSlice';\nimport { FilterInput, FilterWrapper } from './Filter.styled';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  return (\n    <FilterWrapper>\n      Find contacts by name\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleChange}\n      />\n    </FilterWrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const DeleteButton = styled.button`\n  margin-left: 12px;\n  padding: 0 4px;\n  font-size: 12px;\n`;\n","import React from 'react';\nimport { DeleteButton } from './ContactListItem.styled';\n\nexport const ContactListItem = ({ contact: { id, name, phone }, onDelete }) => {\n  return (\n    <li>\n      <p>\n        {name}: {phone}\n        <DeleteButton type=\"button\" onClick={() => onDelete(id)}>\n          Delete\n        </DeleteButton>\n      </p>\n    </li>\n  );\n};\n","import styled from 'styled-components';\n\nexport const SpinnerWrapper = styled.div`\n  display: flex;\n  justify-content: start;\n  align-items: top;\n  height: 100%;\n`;\n","import { RotatingLines } from 'react-loader-spinner';\nimport { SpinnerWrapper } from './Spinnerstyled';\n\nexport const Spinner = () => {\n  return (\n    <SpinnerWrapper>\n      <RotatingLines\n        visible={true}\n        height=\"48\"\n        width=\"48\"\n        color=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        ariaLabel=\"rotating-lines-loading\"\n      />\n    </SpinnerWrapper>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport {\n  selectContacts,\n  selectFilter,\n  selectIsLoading,\n} from '../../redux/contacts/selectors';\nimport { deleteContact, fetchContacts } from '../../redux/contacts/operations';\nimport { ContactListItem } from '../ContactListItem/ContactListItem';\nimport { Spinner } from 'utils/Spinner';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleDelete = id => {\n    dispatch(deleteContact(id));\n  };\n\n  const getFilteredContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const filteredContacts = getFilteredContacts();\n\n  return (\n    <div>\n      {isLoading && <Spinner />}\n      {!isLoading && (\n        <ul>\n          {filteredContacts.map(contact => (\n            <ContactListItem\n              key={contact.id}\n              contact={contact}\n              onDelete={handleDelete}\n            />\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n","import { createGlobalStyle } from 'styled-components';\nimport 'modern-normalize';\n\nexport const GlobalStyle = createGlobalStyle`\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  padding: 60px;\n  font-size: 20px;\n  p {\n    margin: 0;\n  }\n\n  ul{\n    margin: 0;\n  }\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n`;\n","import React from 'react';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { Filter } from '../components/Filter/Filter';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { GlobalStyle } from '../styles/GlobalStyle';\n\nexport const Phonebook = () => {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n      <GlobalStyle />\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  outline: 1px solid;\n  width: 400px;\n  padding: 10px 80px 10px 10px;\n`;\n\nexport const Input = styled.input`\n  border: 1px solid #ccc;\n  padding: 4px;\n  font-size: 16px;\n  outline: none;\n  margin: 4px 0 28px;\n\n  &:focus {\n    outline: 2px solid rgb(96, 192, 255);\n    border-radius: 4px;\n  }\n`;\n\nexport const Button = styled.button`\n  width: 160px;\n  background-color: rgb(96, 192, 255);\n  border-radius: 4px;\n\n  &:disabled {\n    background-color: #fff;\n  }\n`;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilter","filters","createSelector","filter","contact","name","toLowerCase","includes","ContactForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","phone","setPhone","dispatch","useDispatch","useSelector","handleChange","event","_event$target","target","value","Error","concat","_jsxs","Form","onSubmit","preventDefault","some","alert","addContact","children","_jsx","Input","type","onChange","required","Button","disabled","FilterWrapper","styled","_templateObject","_taggedTemplateLiteral","FilterInput","_templateObject2","Filter","setFilter","DeleteButton","ContactListItem","_ref","_ref$contact","id","onDelete","onClick","SpinnerWrapper","Spinner","RotatingLines","visible","height","width","color","strokeWidth","animationDuration","ariaLabel","ContactList","useEffect","fetchContacts","handleDelete","deleteContact","filteredContacts","map","GlobalStyle","createGlobalStyle","Phonebook","_templateObject3"],"sourceRoot":""}